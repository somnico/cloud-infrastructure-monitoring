# /etc/fluent/fluent.conf

# Collects metrics from fluentd 
<source>
    @type prometheus_tail_monitor
</source>

# Collects system metrics for FluentD
<source>
  @type prometheus
</source>

# Parses and collects logs from nginx
<source>
    @type tail
    
    # Defines the regex expression for parsing the logs
    <parse>
    @type regexp
        
    # Regex to parse nginx log format
    expression /^(?<remote>[^ ]*) (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] \"(?<method>\w+)(?:\s+(?<path>[^\"]*?)(?:\s+\S*)?)?\" (?<status_code>[^ ]*) (?<size>[^ ]*)(?:\s"(?<referer>[^\"]*)") "(?<agent>[^\"]*)" (?<urt>[^ ]*)$/
        
	    # Format of the timestamp in the logs 
        time_format %d/%b/%Y:%H:%M:%S %z
        
	    # Original time is kept in record after being parsed.
        keep_time_key true
        
        # Types of data fields parsed from log file.
        types size:integer,reqtime:float,uct:float,uht:float,urt:float
    </parse>
    
    # Tag to be used in output plugin for routing 
    tag nginx
    
    # Log file path to read from 
    path /var/log/nginx/access.log
    
    # File to store position of read logs.
    pos_file /tmp/fluent_nginx.pos
</source>

# Filter section for transforming incoming events matching tag 'nginx'
<filter nginx>
    
    # Plugin type is Prometheus which exposes metrics to a Prometheus server.
    @type prometheus

  # Define a counter metric for total bytes sent by nginx
  <metric>
    name nginx_size_bytes_total
    type counter
    desc nginx bytes sent
    key size
  </metric>

  # Define a counter metric for total request status codes from nginx 
  <metric>
    name nginx_request_status_code_total
    type counter
    desc nginx request status code
    
    # Labels to be attached to the metric.
    <labels>
      method ${method}
      path ${path}
      status_code ${status_code}
    </labels>
  </metric>

  # Define a histogram metric for the total time spent on receiving the response from the upstream server.
  <metric>
    name nginx_http_request_duration_seconds
    type histogram
    desc Histogram of the total time spent on receiving the response from the upstream server.
    key urt
    
    # Labels to be attached to the metric.
    <labels>
      method ${method}
      path ${path}
      status_code ${status_code}
    </labels>
  </metric>

</filter>
